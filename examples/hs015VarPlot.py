"""
This script shows a possible post-processing approach once the history file is generated.
It visualizes the design space, and plots the objective and constraint contours.
It also reads in the history files and plots the path of the optimization.

In order to visualize the optimization history, the history files must be available.
They can be generated by running the hs015.py script for each optimizer, e.g.

>>> python hs015.py --storeHistory --opt slsqp
>>> python hs015.py --storeHistory --opt conmin
"""

# External modules
import matplotlib.pyplot as plt
import numpy as np

# First party modules
from pyoptsparse import History

db = {}
opts = ["ipopt", "slsqp", "snopt", "conmin", "nlpqlp", "psqp"]
for opt in opts:
    fileName = f"{opt}_hs015_Hist.hst"
    try:
        db[opt] = History(fileName)
    except FileNotFoundError:
        pass

obj = {}
xuser = {}

for opt in db.keys():
    val = db[opt].getValues()
    obj[opt] = val["obj"]
    xuser[opt] = val["xvars"]

# Generate the Rosenbrock contours
delta = 0.1
x = np.arange(-2.5, 1.5, delta)
y = np.arange(-6.5, 3.0, delta)
X, Y = np.meshgrid(x, y)

# objective
Z = 100 * (Y - X**2) ** 2 + (1 - X) ** 2
# and the constraint contours
A = X * Y
B = X + Y**2

# plot the contours and constraints
plt.figure()
levels = [250, 500, 1000, 2000, 3000, 6000]
CS = plt.contour(X, Y, Z, levels, colors="k")
levels = np.arange(1.0, 1.01)
CS1 = plt.contour(X, Y, A, levels, colors="g")
levels = np.arange(0.0, 0.01)
CS2 = plt.contour(X, Y, B, levels, colors="b")
plt.clabel(CS, inline=1)
plt.clabel(CS1, inline=1)
plt.clabel(CS2, inline=1)

# set the one sided variable
xupper = [0.5, 0.5]
yupper = [-7, 3.0]

# Now plot the optimizer output
styleList = ["ko-", "ro-", "bo-", "go-", "mo-", "co-", "ks--"]
counter = 0
for opt in db.keys():
    plt.plot(xuser[opt][:, 0], xuser[opt][:, 1], styleList[counter], label=opt)
    counter += 1

plt.plot(xupper, yupper, "k")
plt.legend(loc=3)
plt.xlabel("x1")
plt.ylabel("x2")
plt.title("Simple optimizer comparison")

# Plot optimality and feasibility history for SNOPT and IPOPT
list_opt_with_optimality = [opt for opt in db.keys() if opt in ["ipopt", "snopt"]]
if len(list_opt_with_optimality) > 0:
    fig, axs = plt.subplots(2, 1)

    for opt in list_opt_with_optimality:
        # get iteration count, optimality, and feasibility.
        # SNOPT and IPOPT uses different parameter names for optimality and feasibility.
        if opt == "ipopt":
            optimality = "inf_du"
            feasibility = "inf_pr"
        elif opt == "snopt":
            optimality = "optimality"
            feasibility = "feasibility"

        hist = db[opt].getValues(names=["iter", optimality, feasibility])
        axs[0].plot(hist["iter"], hist[optimality], "o-", label=opt)
        axs[1].plot(hist["iter"], hist[feasibility], "o-", label=opt)

    axs[0].set_yscale("log")
    axs[1].set_yscale("log")
    axs[0].legend()
    axs[0].set_ylabel("Optimality")
    axs[0].set_xticklabels([])
    axs[1].set_ylabel("Feasibility")
    axs[1].set_xlabel("Iteration")

plt.show()
