os:
- linux

branches:
  only:
  - master

language: generic

services:
  - docker
env:
  global:
    - REPO_NAME=$(eval basename $TRAVIS_REPO_SLUG)
    - DOCKER_WORKING_DIR=/home/mdolabuser/packages/$REPO_NAME
    - DOCKER_MOUNT_DIR=/home/mdolabuser/travis/$REPO_NAME
    - SNOPT_DIR=$DOCKER_WORKING_DIR/$REPO_NAME/pySNOPT/source
    - NLPQLP_DIR=$DOCKER_WORKING_DIR/$REPO_NAME/pyNLPQLP/source
  jobs:
    # - DOCKER_TAG=c7-gcc-ompi-latest
    - DOCKER_TAG=c7-intel-impi-latest
    - DOCKER_TAG=u18-gcc-ompi-stable
    - DOCKER_TAG=u18-gcc-ompi-latest
    - DOCKER_TAG=u20-gcc-ompi-stable
    - DOCKER_TAG=u20-gcc-ompi-latest

before_install:
  - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      export DOCKER_REPO=public;
    else
      export DOCKER_REPO=private;
      echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin;
    fi
  - docker pull mdolab/$DOCKER_REPO:$DOCKER_TAG
  # run Docker, key is we mount the current Travis directory into Docker to access content of repo
  - docker run -t -d --rm
        --name app
        --mount "type=bind,src=$(pwd),target=$DOCKER_MOUNT_DIR"
        mdolab/$DOCKER_REPO:$DOCKER_TAG
        /bin/bash
  # set envars for coveralls inside docker

install:
  # We back up the proprietary source codes first
  - if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
      docker exec -it app /bin/bash -c "cp -r $SNOPT_DIR \$HOME/SNOPT && cp -r $NLPQLP_DIR \$HOME/NLPQLP";
    fi
  # We thrown away the existing repo in Docker, and copy the new one in-place
  - docker exec -it app /bin/bash -c "rm -rf $DOCKER_WORKING_DIR && cp -r $DOCKER_MOUNT_DIR $DOCKER_WORKING_DIR"
  # We also remove the python installation
  - docker exec -it app /bin/bash -c "rm -rf $DOCKER_WORKING_DIR/build"
  # Copy back the proprietary codes
  - if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
      docker exec -it app /bin/bash -c "cp -r \$HOME/NLPQLP/* $NLPQLP_DIR/ && cp -r \$HOME/SNOPT/* $SNOPT_DIR/";
    fi
  # Build and install
  - docker exec -it app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && pip install -e ."
script:
  # We need to source the mdolab bashrc before running anything
  - docker exec -it app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && testflo --pre_announce -v . --coverage --coverpkg $REPO_NAME"

after_success:
  # Coveralls
  # These environment variables must be exposed to coveralls for it to work (since we are on Docker)
  - if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
      docker exec -it app /bin/bash -c ". \$HOME/.bashrc_mdolab && pip install coveralls";
      docker exec -e COVERALLS_REPO_TOKEN="$COVERALLS_REPO_TOKEN" -e TRAVIS_JOB_ID="$TRAVIS_JOB_ID" -e TRAVIS_BRANCH="$TRAVIS_BRANCH" -it app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && coveralls --rcfile=.coveragerc";
    fi
